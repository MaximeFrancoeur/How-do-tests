{"name":"How-do-tests","tagline":"How do tests with Mockito.","body":"# ![Mockito logo](https://raw.githubusercontent.com/MaximeFrancoeur/How-do-tests/master/img/mockito_logo.png)  How do tests with Mockito.\r\n### This page is under construction.\r\n\r\n#### 1. Add dependency in your project Maven \r\n```java\r\n<dependency>\r\n\t<dependency>\r\n\t\t<groupId>junit</groupId>\r\n\t\t<artifactId>junit</artifactId>\r\n\t\t<version>4.12</version>\r\n\t\t<scope>test</scope>\r\n\t</dependency>\r\n\t<dependency>\r\n\t\t<groupId>org.mockito</groupId>\r\n\t\t<artifactId>mockito-core</artifactId>\r\n\t\t<version>2.0.7-beta</version>\r\n\t</dependency>\r\n\t<dependency>\r\n\t\t<groupId>javax.inject</groupId>\r\n\t\t<artifactId>javax.inject</artifactId>\r\n\t\t<version>1</version>\r\n\t</dependency>\r\n</dependency>\r\n```\r\n\r\n#### 2. Create a test Class\r\n  - Annote your Class test with @RunWith(MockitoJUnitRunner.class)\r\n  - Add @InjectMocks on Class test\r\n  - Add @Mock on all Class mock\r\n  - Add @Before and init annotations\r\n\r\n```java\r\n// Example service\r\npublic class MyServiceImpl implements MyService {\r\n\r\n    @Inject\r\n    private MyRepositoryDAO myRepositoryDAO;\r\n\r\n    public Foo testExample(final Integer id) throws Exception {\r\n\t\t...\r\n    }\r\n}\r\n\r\n// Example class test\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class MyServiceImplTest {\r\n\r\n    @InjectMocks\r\n    private MyServiceImpl myService;\r\n\r\n    @Mock\r\n    private MyRepositoryDAO myRepositoryDAO;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        MockitoAnnotations.initMocks(this);\r\n    }\r\n\r\n    @Test\r\n    public void testExample() throws Exception {\r\n\t    ...\r\n\t}\r\n\r\n}\r\n```\r\n\r\n#### 3. What test?\r\n\r\nI have a service to test with his methods. I should do what test to cover the largest number of cases?\r\n\r\n```java\r\npublic class MyServiceImpl implements MyService {\r\n\r\n    @Inject\r\n    private MyRepositoryDAO myRepositoryDAO;\r\n\r\n    public Foo getById(final Integer id) throws Exception {\r\n\r\n\t\t// 1. Test id null expected Exception\r\n        if (id == null) {\r\n            throw new Exception();\r\n        }\r\n        \r\n\t\t// 2. Test whether the argument is passed to the DAO.\r\n\t\t// 3. Test if the argument is the same as that through the method.\r\n        final Foo foo = myRepositoryDAO.getById(id);\r\n\r\n\t\t// 4. Test foo is null and expected Exception\r\n        if (foo == null) {\r\n            throw new Exception();\r\n        }\r\n\r\n\t\t// 5. Finally a test with no error.\r\n        return foo;\r\n    }\r\n\r\n    public List<Foo> findByName(final String name) throws Exception {\r\n\r\n\t\t// 1. Test name is null : expected Exception\r\n\t\t// 2. Test name is not null but empty (\"\") : expected Exception\r\n        if (name == null || name.equals(\"\")) {\r\n            throw new Exception();\r\n        }\r\n\r\n\t\t// 3. Test whether the argument is passed to the DAO.\r\n\t\t// 4. Test if the argument is the same as that through the method.\r\n        final List<Foo> foo = myRepositoryDAO.findByName(name);\r\n\r\n\t\t// 5. Test foo is null : excepted ArraysList empty\r\n        if (foo == null) {\r\n            return new ArrayList<Foo>();\r\n        }\r\n\t\t\r\n\t\t// 5. Finally a test with no error.\r\n        return foo;\r\n    }\r\n\r\n    public Foo updateFoo(Foo foo) throws Exception {\r\n\r\n\t\t// 1. Test foo is null : expected Exception\r\n\t\t// 2. Test foo is not null but id  is null : expected Exception\r\n        if (foo == null || foo.getId() == null) {\r\n            throw new Exception();\r\n        }\r\n\t\t\r\n\t\t// 3. Test lastModifiedDate is modified.\r\n        foo.setLastModifiedDate(new Date());\r\n\r\n\t\t// 4. Finally a test with no error.\r\n        return myRepositoryDAO.updateFoo(foo);\r\n    }\r\n}\r\n```\r\n\r\n#### 4. How mock private methode ?\r\n\r\n#### 5. How captor a property ?\r\n\r\n#### 6. How spy a methode ?\r\n\r\n#### 7. Run test with covrage in Intellij\r\n\r\nTo run the tests with Intellij, you only have to click right on the Class or the Class has an external method if you click in a way only this test method will be run.\r\n\r\n<p align=\"center\">\r\n<img align=\"center\" src=\"https://raw.githubusercontent.com/MaximeFrancoeur/How-do-tests/master/img/right_click.png\" alt=\"Run test with coverage\">\r\n<p>\r\n\r\n<p>\r\nAfter your test is finished, you can go into the Class or that you have tested. And look to your left. You will see green and red bars may be darker than me because I changed the configuration in Intellij gluer.\r\n</p>\r\n\r\n- The green bar means that one or tests are spent on its lines.\r\n- The red bar means that no test cases have passed through his lines of code.\r\n\r\n<p align=\"center\">\r\n<img align=\"center\" src=\"https://raw.githubusercontent.com/MaximeFrancoeur/How-do-tests/master/img/covrage.png\" alt=\"coverage\">\r\n</p>\r\n\r\n<br/>\r\nYou can click the green bars to view the number of times that his line was covered by your tests.\r\n\r\n<p align=\"center\">\r\n<img align=\"center\" src=\"https://raw.githubusercontent.com/MaximeFrancoeur/How-do-tests/master/img/left_click_covrage.png\" alt=\"Number hits\">\r\n</p>\r\n\r\n<br/>\r\nAt the bottom right of your Intellij you your new option appear.\r\nClick above to see the percentage of power line method and hedged Class.\r\n\r\n<p align=\"center\">\r\n<img align=\"center\" src=\"https://raw.githubusercontent.com/MaximeFrancoeur/How-do-tests/master/img/icon_covrage_right.png\" alt=\"New icon coverage\">\r\n</p>\r\n\r\n<br/>\r\nClick in the packages you want to go and watch the number of percentage cover your project.\r\n\r\n<p align=\"center\">\r\n<img align=\"center\" src=\"https://raw.githubusercontent.com/MaximeFrancoeur/How-do-tests/master/img/covrage_detail.png\" alt=\"All coverage\">\r\n</p>\r\n\r\n\r\n#### 8. How test DAO with Flyway ?\r\n  - Create Flyway config\r\n  - Create Flyway insert data\r\n\r\n#### 9. How test Controller ?\r\n\r\n#### 10. Best practice\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}